/**
 * XPath 2 Parser
 * A Parser for XPath 2
 * Copyright (C) 2016 Evolved Binary Ltd.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */
package com.evolvedbinary.cql.parser;

import com.evolvedbinary.cql.parser.ast.Expr;
import org.parboiled.Parboiled;
import org.parboiled.parserunners.ParseRunner;
import org.parboiled.parserunners.RecoveringParseRunner;
import org.parboiled.support.Chars;
import org.parboiled.support.ParseTreeUtils;
import org.parboiled.support.ParsingResult;

import java.io.PrintStream;

import static org.parboiled.errors.ErrorUtils.printParseErrors;

/**
 * Simple utility class showing how to use
 * the CorpusQLParser
 *
 * Created by aretter on 06/09/2016.
 */
public class CorpusQLUtil {

    public final static void main(final String args[]) {
        if(args.length != 1) {
            System.err.println("You must provide a Corpus Query Language expression as an argument.");
            System.exit(-1);
        } else {
            parseXPath(args[0], System.out, System.err);
        }
    }

    /**
     * Parses a Corpus Query Language Expression and generates an AST
     *
     * @param cql The Corpus Query Language to parse
     * @param out Either a print stream for receiving a debug print of the NodeTree generated by the parser, or null otherwise
     * @param err Either a print stream for receiving errors that occurred during parsing or null otherwise
     *
     * @return An {@link Expr} which is the root of the generated AST
     */
    public static Expr parseXPath(final String cql, final PrintStream out, final PrintStream err) {
        final CorpusQLParser parser = Parboiled.createParser(CorpusQLParser.class, Boolean.TRUE);
        final ParseRunner<Expr> parseRunner = new RecoveringParseRunner<Expr>(parser.withEOI(parser.Query()));
        final ParsingResult<Expr> result = parseRunner.run(cql + Chars.EOI);

        if(out != null) {
            final String parseTreePrintOut = ParseTreeUtils.printNodeTree(result);
            out.print(parseTreePrintOut);
        }

        if(result.hasErrors() && err != null) {
            final String errors = printParseErrors(result);
            err.print(errors);
        }

        return (Expr)result.parseTreeRoot.getValue();
    }
}
